{"version":3,"file":"static/js/800.14d76a56.chunk.js","mappings":"4KAGO,MAAMA,EACXA,CAACC,EAAcC,IAAiBC,UAC9BC,GAASC,EAAAA,EAAAA,KAAW,IACpB,IAIE,IAAIC,SAHmBC,EAAAA,EAAMC,IAAI,4CAADC,OACcR,EAAI,WAE9BK,KAAKL,KACzBG,GAASM,EAAAA,EAAAA,IAAUJ,IACnBJ,GAASD,GAAcA,EAAO,GAChC,CAAE,MAAOU,GACPP,GAASC,EAAAA,EAAAA,KAAW,IACpBO,QAAQC,IAAIF,EACd,CACAP,GAASC,EAAAA,EAAAA,KAAW,GAAO,E,aCV/B,MAAMS,GAAYC,EAAAA,EAAAA,OAAK,IAAM,+BACvBC,GAAYD,EAAAA,EAAAA,OAAK,IAAM,+BACvBE,GAASF,EAAAA,EAAAA,OAAK,IAAM,+BA0F1B,EAjF0BG,KACxB,MAAOjB,EAAMC,IAAWiB,EAAAA,EAAAA,UAAS,IAC1BC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,IAE/C,MAAOG,EAAWC,IAAgBJ,EAAAA,EAAAA,UADP,IAGrBf,GAAWoB,EAAAA,EAAAA,OAEX,KAAElB,EAAI,aAAEmB,EAAY,MAAEC,EAAK,QAAEC,IAAYC,EAAAA,EAAAA,KAC5CC,GAAuCA,EAAMC,SAI1CC,GAAYC,EAAAA,EAAAA,cAAY7B,UAC5BC,EAASJ,EAAiBC,EAAMC,GAAS,GACxC,CAACD,EAAMG,KAEV6B,EAAAA,EAAAA,YAAU,KACR7B,EAASJ,EAAiBC,EAAMC,IACzB,MACLgC,EAAAA,EAAAA,KAAW,IAEZ,KAEHD,EAAAA,EAAAA,YAAU,KACRV,EAAajB,EAAK,GACjB,CAACA,KAEJ2B,EAAAA,EAAAA,YAAU,KAER,MAAME,EAAeA,KACnB,GAAI7B,EAAK8B,UAAYX,EACnB,OAEF,MAAM,UAAEY,EAAS,aAAEC,EAAY,aAAEC,GAAiBC,SAASC,gBACvDJ,EAAYC,GAAgBC,EAAe,IAC7CR,GACF,EAIF,OADAW,OAAOC,iBAAiB,SAAUR,EAAc,CAACS,SAAS,IACnD,KACLF,OAAOG,oBAAoB,SAAUV,EAAc,CAAES,SAAS,GAAO,CACtE,GACA,CAACtC,EAAK8B,OAAQL,EAAWN,IAiB5B,OACEqB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACnC,EAAS,CACRY,MAAOA,EACPN,YAAaA,EACb8B,aAnBgBC,IACpB,MAAM,MAAEC,GAAUD,EAAME,OAGxB,GAFAhC,EAAe+B,IAEVA,EAAMhB,OAET,YADAb,EAAajB,GAGf,MAAMgD,EAAa,IAAIhD,GAAMiD,QAAQC,GAC5BA,EAAMC,KAAKC,cAAcC,SAASP,EAAMM,iBAEjDnC,EAAa+B,EAAM,KAWjBL,EAAAA,EAAAA,KAAA,OAAKW,UAAU,kBAAiBZ,UAC9BF,EAAAA,EAAAA,MAAA,OAAKc,UAAU,yBAAwBZ,SAAA,CAC3B,OAAT1B,QAAS,IAATA,OAAS,EAATA,EAAWuC,KAAI,CAACC,EAAkBC,KACjCd,EAAAA,EAAAA,KAACjC,EAAS,CAAW8C,KAAMA,GAAXC,KAEjBpC,IAAWsB,EAAAA,EAAAA,KAAChC,EAAM,WAGtB,C","sources":["store/movies/moviesAPI.ts","pages/movies/MovieList.tsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { setLoading, setMovies } from \"./moviesSlice\";\r\n\r\nexport const getMoviewsByPage: any =\r\n  (page: number, setPage: any) => async (dispatch: any) => {\r\n    dispatch(setLoading(true));\r\n    try {\r\n      const response = await axios.get(\r\n        `https://test.create.diagnal.com/data/page${page}.json`\r\n      );\r\n      let data = response.data.page;\r\n      dispatch(setMovies(data));\r\n      setPage((page: any) => page + 1);\r\n    } catch (error) {\r\n      dispatch(setLoading(false));\r\n      console.log(error);\r\n    }\r\n    dispatch(setLoading(false));\r\n  };\r\n","import { FC, lazy, Suspense, useEffect, useState, useCallback } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { getMoviewsByPage } from '../../store/movies/moviesAPI'\r\nimport { clearData } from '../../store/movies/moviesSlice'\r\n\r\nimport { MovieProps } from '../../components/MovieCard'\r\nconst SearchBar = lazy(() => import('../../components/SearchBar'))\r\nconst MovieCard = lazy(() => import('../../components/MovieCard'))\r\nconst Loader = lazy(() => import('../../components/Loader'))\r\n\r\nexport interface MovieStateProps {\r\n  data: MovieProps[]\r\n  totalRecords: number\r\n  title: string\r\n  loading: boolean\r\n}\r\n\r\nconst MovieList: FC<{}> = () => {\r\n  const [page, setPage] = useState(1)\r\n  const [searchValue, setSearchValue] = useState('')\r\n  let movies: MovieProps[] = []\r\n  const [movieList, setMovieList] = useState(movies)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const { data, totalRecords, title, loading } = useSelector(\r\n    (state: { movies: MovieStateProps }) => state.movies\r\n  )\r\n\r\n  // Fetch data from api\r\n  const fetchData = useCallback(async () => {\r\n    dispatch(getMoviewsByPage(page, setPage))\r\n  }, [page, dispatch])\r\n\r\n  useEffect(() => {\r\n    dispatch(getMoviewsByPage(page, setPage))\r\n    return () => {\r\n      clearData()\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setMovieList(data)\r\n  }, [data])\r\n\r\n  useEffect(() => {\r\n    // Handle scroll action on mouse scroll\r\n    const handleScroll = () => {\r\n      if (data.length === +totalRecords) {\r\n        return\r\n      }\r\n      const { scrollTop, clientHeight, scrollHeight } = document.documentElement\r\n      if (scrollTop + clientHeight >= scrollHeight - 20) {\r\n        fetchData()\r\n      }\r\n    }\r\n\r\n    window.addEventListener('scroll', handleScroll, {capture: true})\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll, { capture: true })\r\n    }\r\n  }, [data.length, fetchData, totalRecords])\r\n\r\n  // Handle search action for search input\r\n  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = event.target\r\n    setSearchValue(value)\r\n    // If the user searched for an empty string, display all data.\r\n    if (!value.length) {\r\n      setMovieList(data)\r\n      return\r\n    }\r\n    const items: any = [...data].filter((movie) => {\r\n      return movie.name.toLowerCase().includes(value.toLowerCase())\r\n    })\r\n    setMovieList(items)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <SearchBar\r\n        title={title}\r\n        searchValue={searchValue}\r\n        handleSearch={handleSearch}\r\n      />\r\n\r\n      <div className='grid-container '>\r\n        <div className='grid grid-cols-3 gap-4'>\r\n          {movieList?.map((item: MovieProps, idx: number) => (\r\n            <MovieCard key={idx} item={item} />\r\n          ))}\r\n          {loading && <Loader />}\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MovieList\r\n"],"names":["getMoviewsByPage","page","setPage","async","dispatch","setLoading","data","axios","get","concat","setMovies","error","console","log","SearchBar","lazy","MovieCard","Loader","MovieList","useState","searchValue","setSearchValue","movieList","setMovieList","useDispatch","totalRecords","title","loading","useSelector","state","movies","fetchData","useCallback","useEffect","clearData","handleScroll","length","scrollTop","clientHeight","scrollHeight","document","documentElement","window","addEventListener","capture","removeEventListener","_jsxs","_Fragment","children","_jsx","handleSearch","event","value","target","items","filter","movie","name","toLowerCase","includes","className","map","item","idx"],"sourceRoot":""}